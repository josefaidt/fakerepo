name: release
on:
  pull_request:
    branches:
      - main
    types:
      - closed
env:
  AWS_REGION: us-east-1
jobs:
  verify-run:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    outputs:
      tag: ${{ steps.tag.outputs.result }}
    steps:
      - name: extract-tag-name
        id: tag
        uses: actions/github-script@0.2.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            return context.payload.pull_request.title.replace(/release\: /, '');
  release:
    runs-on: ubuntu-latest
    needs: verify-run
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    env:
      TAG: ${{ needs.verify-run.outputs.tag }}
      IS_PRERELEASE: ${{ contains(needs.verify-run.outputs.tag, 'next') }}
    permissions:
      id-token: write # for AWS Action to interact with GitHub's OIDC endpoint
      contents: write # for gh CLI to create a release
    steps:
      - run: echo "tag is ${{ env.TAG }}. is pre ${{ env.IS_PRERELEASE }}"
      - name: Extract tag name
        id: tag
        uses: actions/github-script@0.2.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            return context.payload.pull_request.title.replace(/release\: /, '');
      - uses: actions/checkout@v3
        with:
          persist-credentials: true
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: pnpm/action-setup@v2.2.2
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - name: cdk-synth-main
        run: pnpm cdk synth
      - name: cdk-deploy-main
        run: pnpm cdk deploy
      - name: prerelease
        if: ${{ env.IS_PRERELEASE }}
        run: |
          url=$(gh release create ${{ env.TAG }} --generate-notes --prerelease)
          tag=$(echo "${url/releases\/tag/tree}")
          echo ::notice title="release"::$url
          echo ::notice title="tag"::$tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: release # same thing as above but without `--prerelease`...
        if: ${{ env.IS_PRERELEASE }}
        run: |
          url=$(gh release create ${{ env.TAG }} --generate-notes)
          tag=$(echo "${url/releases\/tag/tree}")
          echo ::notice title="release"::$url
          echo ::notice title="tag"::$tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
